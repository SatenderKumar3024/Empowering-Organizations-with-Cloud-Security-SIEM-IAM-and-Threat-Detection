"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import { AlertTriangle, Shield, ShieldAlert, Loader2 } from "lucide-react"

export default function VulnerabilityTest() {
  const [isScanning, setIsScanning] = useState(false)
  const [progress, setProgress] = useState(0)
  const [results, setResults] = useState<{
    high: number
    medium: number
    low: number
    total: number
    completed: boolean
  }>({
    high: 0,
    medium: 0,
    low: 0,
    total: 0,
    completed: false,
  })

  const startScan = () => {
    setIsScanning(true)
    setProgress(0)
    setResults({
      high: 0,
      medium: 0,
      low: 0,
      total: 0,
      completed: false,
    })

    // Simulate scanning progress
    const interval = setInterval(() => {
      setProgress((prev) => {
        if (prev >= 100) {
          clearInterval(interval)
          setIsScanning(false)

          // Generate random results
          const high = Math.floor(Math.random() * 5)
          const medium = Math.floor(Math.random() * 8)
          const low = Math.floor(Math.random() * 12)

          setResults({
            high,
            medium,
            low,
            total: high + medium + low,
            completed: true,
          })

          return 100
        }
        return prev + 2
      })
    }, 100)
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "high":
        return "bg-red-500"
      case "medium":
        return "bg-yellow-500"
      case "low":
        return "bg-blue-500"
      default:
        return "bg-gray-500"
    }
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Vulnerability Scanner Test</CardTitle>
        <CardDescription>Test the vulnerability scanning functionality</CardDescription>
      </CardHeader>
      <CardContent>
        {isScanning ? (
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <Loader2 className="animate-spin" />
              <span>Scanning system for vulnerabilities...</span>
            </div>
            <Progress value={progress} className="h-2" />
            <p className="text-sm text-right">{progress}% complete</p>
          </div>
        ) : results.completed ? (
          <div className="space-y-4">
            <div className="grid grid-cols-3 gap-4">
              <Card className="bg-red-50 dark:bg-red-900/20">
                <CardContent className="p-4 flex flex-col items-center">
                  <ShieldAlert className="text-red-500 mb-2" size={24} />
                  <h3 className="font-bold">High</h3>
                  <p className="text-2xl font-bold">{results.high}</p>
                </CardContent>
              </Card>
              <Card className="bg-yellow-50 dark:bg-yellow-900/20">
                <CardContent className="p-4 flex flex-col items-center">
                  <AlertTriangle className="text-yellow-500 mb-2" size={24} />
                  <h3 className="font-bold">Medium</h3>
                  <p className="text-2xl font-bold">{results.medium}</p>
                </CardContent>
              </Card>
              <Card className="bg-blue-50 dark:bg-blue-900/20">
                <CardContent className="p-4 flex flex-col items-center">
                  <Shield className="text-blue-500 mb-2" size={24} />
                  <h3 className="font-bold">Low</h3>
                  <p className="text-2xl font-bold">{results.low}</p>
                </CardContent>
              </Card>
            </div>

            <div className="mt-4">
              <h3 className="font-bold mb-2">CVSS Scores</h3>
              <div className="space-y-2">
                {results.high > 0 &&
                  Array.from({ length: Math.min(results.high, 3) }).map((_, i) => (
                    <div key={`high-${i}`} className="flex items-center justify-between p-2 border rounded">
                      <div className="flex items-center gap-2">
                        <Badge className="bg-red-500">High</Badge>
                        <span>CVE-2023-{Math.floor(1000 + Math.random() * 9000)}</span>
                      </div>
                      <div className="font-bold">{(7 + Math.random() * 3).toFixed(1)}</div>
                    </div>
                  ))}

                {results.medium > 0 &&
                  Array.from({ length: Math.min(results.medium, 3) }).map((_, i) => (
                    <div key={`medium-${i}`} className="flex items-center justify-between p-2 border rounded">
                      <div className="flex items-center gap-2">
                        <Badge className="bg-yellow-500">Medium</Badge>
                        <span>CVE-2023-{Math.floor(1000 + Math.random() * 9000)}</span>
                      </div>
                      <div className="font-bold">{(4 + Math.random() * 3).toFixed(1)}</div>
                    </div>
                  ))}

                {results.low > 0 &&
                  Array.from({ length: Math.min(results.low, 3) }).map((_, i) => (
                    <div key={`low-${i}`} className="flex items-center justify-between p-2 border rounded">
                      <div className="flex items-center gap-2">
                        <Badge className="bg-blue-500">Low</Badge>
                        <span>CVE-2023-{Math.floor(1000 + Math.random() * 9000)}</span>
                      </div>
                      <div className="font-bold">{(1 + Math.random() * 3).toFixed(1)}</div>
                    </div>
                  ))}
              </div>
            </div>
          </div>
        ) : (
          <div className="flex flex-col items-center justify-center py-8">
            <Shield className="text-gray-400 mb-4" size={48} />
            <p className="text-center text-muted-foreground">Click the button below to start a vulnerability scan</p>
          </div>
        )}
      </CardContent>
      <CardFooter>
        <Button onClick={startScan} disabled={isScanning} className="w-full">
          {isScanning ? "Scanning..." : results.completed ? "Scan Again" : "Start Scan"}
        </Button>
      </CardFooter>
    </Card>
  )
}
