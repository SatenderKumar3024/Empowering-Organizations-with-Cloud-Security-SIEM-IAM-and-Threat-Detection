"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { AlertTriangle, Search } from "lucide-react"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

interface Vulnerability {
  id: string
  cve: string
  title: string
  severity: "Critical" | "High" | "Medium" | "Low"
  cvss: number
  affected: string
  status: "Open" | "In Progress" | "Mitigated" | "Resolved"
  discoveredDate: string
  patchAvailable: boolean
}

export function VulnerabilityDashboard() {
  const [searchTerm, setSearchTerm] = useState("")
  const [severityFilter, setSeverityFilter] = useState("all")
  const [statusFilter, setStatusFilter] = useState("all")
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([])
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    // Simulate loading data
    const timer = setTimeout(() => {
      setVulnerabilities([
        {
          id: "vuln-001",
          cve: "CVE-2025-1234",
          title: "Remote Code Execution in Apache Log4j",
          severity: "Critical",
          cvss: 9.8,
          affected: "Web Servers, API Gateway",
          status: "In Progress",
          discoveredDate: "2025-04-15",
          patchAvailable: true,
        },
        {
          id: "vuln-002",
          cve: "CVE-2025-5678",
          title: "SQL Injection in Internal CRM",
          severity: "High",
          cvss: 8.2,
          affected: "CRM Application",
          status: "Open",
          discoveredDate: "2025-04-20",
          patchAvailable: false,
        },
        {
          id: "vuln-003",
          cve: "CVE-2025-9012",
          title: "Cross-Site Scripting in Customer Portal",
          severity: "Medium",
          cvss: 6.5,
          affected: "Customer Portal",
          status: "Mitigated",
          discoveredDate: "2025-04-18",
          patchAvailable: true,
        },
        {
          id: "vuln-004",
          cve: "CVE-2025-3456",
          title: "Privilege Escalation in Windows Server",
          severity: "Critical",
          cvss: 9.2,
          affected: "Windows Servers",
          status: "Open",
          discoveredDate: "2025-04-22",
          patchAvailable: true,
        },
        {
          id: "vuln-005",
          cve: "CVE-2025-7890",
          title: "Information Disclosure in API",
          severity: "Low",
          cvss: 3.7,
          affected: "API Gateway",
          status: "Resolved",
          discoveredDate: "2025-04-10",
          patchAvailable: true,
        },
        {
          id: "vuln-006",
          cve: "CVE-2025-2468",
          title: "Buffer Overflow in Network Driver",
          severity: "High",
          cvss: 7.8,
          affected: "Network Infrastructure",
          status: "In Progress",
          discoveredDate: "2025-04-19",
          patchAvailable: false,
        },
        {
          id: "vuln-007",
          cve: "CVE-2025-1357",
          title: "Authentication Bypass in SSO",
          severity: "Critical",
          cvss: 9.1,
          affected: "SSO Service",
          status: "Mitigated",
          discoveredDate: "2025-04-21",
          patchAvailable: true,
        },
      ])
      setIsLoading(false)
    }, 1000)

    return () => clearTimeout(timer)
  }, [])

  const filteredVulnerabilities = vulnerabilities.filter((vuln) => {
    const matchesSearch =
      vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      vuln.cve.toLowerCase().includes(searchTerm.toLowerCase()) ||
      vuln.affected.toLowerCase().includes(searchTerm.toLowerCase())

    const matchesSeverity = severityFilter === "all" || vuln.severity.toLowerCase() === severityFilter.toLowerCase()
    const matchesStatus = statusFilter === "all" || vuln.status.toLowerCase() === statusFilter.toLowerCase()

    return matchesSearch && matchesSeverity && matchesStatus
  })

  const getSeverityBadge = (severity: string) => {
    switch (severity) {
      case "Critical":
        return <Badge className="bg-red-500 hover:bg-red-600">Critical</Badge>
      case "High":
        return <Badge className="bg-orange-500 hover:bg-orange-600">High</Badge>
      case "Medium":
        return <Badge className="bg-yellow-500 hover:bg-yellow-600">Medium</Badge>
      case "Low":
        return <Badge className="bg-blue-500 hover:bg-blue-600">Low</Badge>
      default:
        return <Badge>Unknown</Badge>
    }
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "Open":
        return (
          <Badge variant="outline" className="border-red-500 text-red-500">
            Open
          </Badge>
        )
      case "In Progress":
        return (
          <Badge variant="outline" className="border-orange-500 text-orange-500">
            In Progress
          </Badge>
        )
      case "Mitigated":
        return (
          <Badge variant="outline" className="border-blue-500 text-blue-500">
            Mitigated
          </Badge>
        )
      case "Resolved":
        return (
          <Badge variant="outline" className="border-green-500 text-green-500">
            Resolved
          </Badge>
        )
      default:
        return <Badge variant="outline">Unknown</Badge>
    }
  }

  const getCvssColor = (score: number) => {
    if (score >= 9.0) return "bg-red-500"
    if (score >= 7.0) return "bg-orange-500"
    if (score >= 4.0) return "bg-yellow-500"
    return "bg-blue-500"
  }

  return (
    <Card className="w-full shadow-lg border-border/50">
      <CardHeader className="bg-gradient-to-r from-slate-800 to-slate-900 text-white">
        <div className="flex items-center gap-2">
          <AlertTriangle className="h-5 w-5 text-orange-400" />
          <CardTitle>Vulnerability Dashboard</CardTitle>
        </div>
      </CardHeader>
      <CardContent className="p-4">
        <div className="flex flex-col sm:flex-row gap-4 mb-4">
          <div className="relative flex-grow">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search vulnerabilities..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-9 bg-background/50"
            />
          </div>
          <div className="flex gap-2">
            <Select value={severityFilter} onValueChange={setSeverityFilter}>
              <SelectTrigger className="w-[130px]">
                <SelectValue placeholder="Severity" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Severities</SelectItem>
                <SelectItem value="critical">Critical</SelectItem>
                <SelectItem value="high">High</SelectItem>
                <SelectItem value="medium">Medium</SelectItem>
                <SelectItem value="low">Low</SelectItem>
              </SelectContent>
            </Select>

            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger className="w-[130px]">
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Statuses</SelectItem>
                <SelectItem value="open">Open</SelectItem>
                <SelectItem value="in progress">In Progress</SelectItem>
                <SelectItem value="mitigated">Mitigated</SelectItem>
                <SelectItem value="resolved">Resolved</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        {isLoading ? (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow className="bg-muted/50 hover:bg-muted">
                  <TableHead>CVE</TableHead>
                  <TableHead>Title</TableHead>
                  <TableHead>Severity</TableHead>
                  <TableHead>CVSS</TableHead>
                  <TableHead>Affected Systems</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Discovered</TableHead>
                  <TableHead>Patch</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredVulnerabilities.length > 0 ? (
                  filteredVulnerabilities.map((vuln) => (
                    <TableRow key={vuln.id} className="hover:bg-muted/50">
                      <TableCell className="font-mono text-sm">{vuln.cve}</TableCell>
                      <TableCell className="font-medium">{vuln.title}</TableCell>
                      <TableCell>{getSeverityBadge(vuln.severity)}</TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <span className="font-mono">{vuln.cvss.toFixed(1)}</span>
                          <Progress value={vuln.cvss * 10} className={`h-2 w-16 ${getCvssColor(vuln.cvss)}`} />
                        </div>
                      </TableCell>
                      <TableCell>{vuln.affected}</TableCell>
                      <TableCell>{getStatusBadge(vuln.status)}</TableCell>
                      <TableCell>{vuln.discoveredDate}</TableCell>
                      <TableCell>
                        {vuln.patchAvailable ? (
                          <Badge variant="outline" className="border-green-500 text-green-500">
                            Available
                          </Badge>
                        ) : (
                          <Badge variant="outline" className="border-red-500 text-red-500">
                            Pending
                          </Badge>
                        )}
                      </TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={8} className="text-center py-8 text-muted-foreground">
                      No vulnerabilities found matching your search criteria.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </div>
        )}
      </CardContent>
    </Card>
  )
}
