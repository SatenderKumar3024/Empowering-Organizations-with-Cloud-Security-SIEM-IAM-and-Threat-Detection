"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Search, AlertTriangle, Shield, RefreshCw, Filter, BarChart3, Download } from "lucide-react"
import { useToast } from "@/hooks/use-toast"

interface Vulnerability {
  id: string
  name: string
  description: string
  severity: "critical" | "high" | "medium" | "low"
  cvss: number
  affected: string
  status: "open" | "mitigated" | "patched"
  discoveredDate: string
}

export function VulnerabilityScanner({ timeFilter = "24h" }: { timeFilter?: string }) {
  const [isScanning, setIsScanning] = useState(false)
  const [scanProgress, setScanProgress] = useState(0)
  const [scanComplete, setScanComplete] = useState(false)
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([])
  const { toast } = useToast()

  useEffect(() => {
    // Update data based on time filter
    const vulnerabilitiesByTime: Record<string, number> = {
      "24h": 28,
      "12h": 21,
      "6h": 14,
      "1h": 7,
    }

    // Update the number of vulnerabilities based on time filter
    if (scanComplete) {
      createMockVulnerabilities(vulnerabilitiesByTime[timeFilter] || vulnerabilitiesByTime["24h"])
    }
  }, [timeFilter, scanComplete])

  const createMockVulnerabilities = (count: number) => {
    const vulnNames = [
      "Log4j Remote Code Execution",
      "SQL Injection in Web Application",
      "Insecure Direct Object Reference",
      "Cross-Site Scripting (XSS)",
      "SSL/TLS Weak Configuration",
      "Default Credentials",
      "Broken Authentication",
      "Server-Side Request Forgery",
      "Privilege Escalation",
      "XML External Entity Injection",
      "Command Injection",
      "Path Traversal",
      "Sensitive Data Exposure",
    ]

    const severities = ["critical", "high", "medium", "low"]
    const statuses = ["open", "mitigated", "patched"]
    const affected = [
      "Web Server",
      "Database",
      "API Gateway",
      "Load Balancer",
      "Authentication Service",
      "Admin Portal",
      "User Portal",
    ]

    const generateCVSS = (severity: string): number => {
      switch (severity) {
        case "critical":
          return Math.floor(Math.random() * 20) / 10 + 9.0 // 9.0-10.0
        case "high":
          return Math.floor(Math.random() * 20) / 10 + 7.0 // 7.0-8.9
        case "medium":
          return Math.floor(Math.random() * 30) / 10 + 4.0 // 4.0-6.9
        case "low":
          return Math.floor(Math.random() * 30) / 10 + 1.0 // 1.0-3.9
        default:
          return 5.0
      }
    }

    const newVulnerabilities: Vulnerability[] = Array.from({ length: count }).map((_, index) => {
      const severity = severities[Math.floor(Math.random() * (severities.length - (index % 4)))]
      return {
        id: `VULN-${Date.now()}-${index}`,
        name: vulnNames[index % vulnNames.length],
        description: `Vulnerability that could allow attackers to ${
          severity === "critical"
            ? "execute arbitrary code"
            : severity === "high"
              ? "access sensitive data"
              : severity === "medium"
                ? "cause a denial of service"
                : "obtain information disclosure"
        }`,
        severity: severity as "critical" | "high" | "medium" | "low",
        cvss: generateCVSS(severity),
        affected: affected[Math.floor(Math.random() * affected.length)],
        status: index < count * 0.7 ? "open" : statuses[Math.floor(Math.random() * statuses.length)],
        discoveredDate: new Date(Date.now() - Math.floor(Math.random() * 864000000)).toISOString(), // Random time within last 10 days
      }
    })

    // Sort by severity and CVSS score
    newVulnerabilities.sort((a, b) => {
      const severityOrder = { critical: 0, high: 1, medium: 2, low: 3 }
      if (a.severity !== b.severity) {
        return severityOrder[a.severity] - severityOrder[b.severity]
      }
      return b.cvss - a.cvss
    })

    setVulnerabilities(newVulnerabilities)
  }

  const startScan = () => {
    setIsScanning(true)
    setScanProgress(0)

    toast({
      title: "Vulnerability Scan Started",
      description: "Scanning network and applications for security vulnerabilities...",
    })

    // Simulate scan progress
    const interval = setInterval(() => {
      setScanProgress((prev) => {
        if (prev >= 100) {
          clearInterval(interval)
          setTimeout(() => {
            const vulnerabilitiesByTime: Record<string, number> = {
              "24h": 28,
              "12h": 21,
              "6h": 14,
              "1h": 7,
            }
            createMockVulnerabilities(vulnerabilitiesByTime[timeFilter] || vulnerabilitiesByTime["24h"])
            setIsScanning(false)
            setScanComplete(true)

            toast({
              title: "Scan Complete",
              description: `Found ${vulnerabilitiesByTime[timeFilter] || vulnerabilitiesByTime["24h"]} vulnerabilities in your environment.`,
            })
          }, 500)
          return 100
        }
        return prev + 2
      })
    }, 150)
  }

  const getSeverityBadge = (severity: string) => {
    switch (severity) {
      case "critical":
        return <Badge className="bg-red-500/20 text-red-500 border-red-500/30">Critical</Badge>
      case "high":
        return <Badge className="bg-orange-500/20 text-orange-500 border-orange-500/30">High</Badge>
      case "medium":
        return <Badge className="bg-yellow-500/20 text-yellow-500 border-yellow-500/30">Medium</Badge>
      case "low":
        return <Badge className="bg-blue-500/20 text-blue-500 border-blue-500/30">Low</Badge>
      default:
        return <Badge className="bg-gray-500/20 text-gray-500 border-gray-500/30">Unknown</Badge>
    }
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "open":
        return <Badge className="bg-red-500/20 text-red-500 border-red-500/30">Open</Badge>
      case "mitigated":
        return <Badge className="bg-yellow-500/20 text-yellow-500 border-yellow-500/30">Mitigated</Badge>
      case "patched":
        return <Badge className="bg-green-500/20 text-green-500 border-green-500/30">Patched</Badge>
      default:
        return <Badge className="bg-gray-500/20 text-gray-500 border-gray-500/30">Unknown</Badge>
    }
  }

  const getCVSSColor = (cvss: number) => {
    if (cvss >= 9.0) return "text-red-500"
    if (cvss >= 7.0) return "text-orange-500"
    if (cvss >= 4.0) return "text-yellow-500"
    return "text-blue-500"
  }

  return (
    <Card className="border-primary/20">
      <CardHeader className="pb-2">
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <AlertTriangle className="h-5 w-5 text-primary" />
            Vulnerability Scanner
          </CardTitle>
          <div className="flex items-center gap-2">
            <Badge variant="outline">Time range: {timeFilter}</Badge>
            <Button onClick={startScan} disabled={isScanning} className="gap-2">
              {isScanning ? (
                <>
                  <RefreshCw className="h-4 w-4 animate-spin" />
                  Scanning...
                </>
              ) : (
                <>
                  <Shield className="h-4 w-4" />
                  Start Scan
                </>
              )}
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        {isScanning && (
          <div className="mb-6">
            <div className="flex justify-between mb-2">
              <span className="text-sm font-medium">Scan in progress...</span>
              <span className="text-sm">{scanProgress}%</span>
            </div>
            <Progress value={scanProgress} className="h-2" />
          </div>
        )}

        {!scanComplete && !isScanning && (
          <div className="flex flex-col items-center justify-center py-12">
            <Shield className="h-16 w-16 text-muted-foreground/50 mb-4" />
            <h3 className="text-lg font-semibold mb-2">No Scan Results</h3>
            <p className="text-muted-foreground mb-6 text-center max-w-md">
              Run a vulnerability scan to detect security issues in your environment. The scanner will identify
              misconfigurations, outdated software, and security weaknesses.
            </p>
            <Button onClick={startScan} className="gap-2">
              <Shield className="h-4 w-4" />
              Start Scan
            </Button>
          </div>
        )}

        {scanComplete && (
          <>
            <div className="flex flex-wrap items-center justify-between gap-4 mb-6">
              <div className="flex items-center gap-2">
                <div className="relative w-[250px]">
                  <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                  <input
                    placeholder="Search vulnerabilities..."
                    className="pl-9 h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50"
                  />
                </div>
                <Button variant="outline" size="sm" className="gap-1.5">
                  <Filter className="h-4 w-4" />
                  Filter
                </Button>
              </div>
              <div className="flex items-center gap-2">
                <Button variant="outline" size="sm" className="gap-1.5">
                  <BarChart3 className="h-4 w-4" />
                  Dashboard
                </Button>
                <Button variant="outline" size="sm" className="gap-1.5">
                  <Download className="h-4 w-4" />
                  Export
                </Button>
              </div>
            </div>

            {vulnerabilities.length > 0 && (
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow className="bg-muted/50">
                      <TableHead>Vulnerability</TableHead>
                      <TableHead>CVSS Score</TableHead>
                      <TableHead>Severity</TableHead>
                      <TableHead>Affected Asset</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead>Discovered</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {vulnerabilities.map((vuln) => (
                      <TableRow key={vuln.id} className="hover:bg-muted/20 cursor-pointer">
                        <TableCell>
                          <div>
                            <div className="font-medium">{vuln.name}</div>
                            <div className="text-xs text-muted-foreground">{vuln.description}</div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className={`font-mono font-bold ${getCVSSColor(vuln.cvss)}`}>{vuln.cvss.toFixed(1)}</div>
                        </TableCell>
                        <TableCell>{getSeverityBadge(vuln.severity)}</TableCell>
                        <TableCell>{vuln.affected}</TableCell>
                        <TableCell>{getStatusBadge(vuln.status)}</TableCell>
                        <TableCell className="text-xs text-muted-foreground">
                          {new Date(vuln.discoveredDate).toLocaleString()}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            )}

            <div className="mt-4 flex items-center justify-between">
              <div className="text-sm text-muted-foreground">{vulnerabilities.length} vulnerabilities found</div>
              <div className="flex gap-2">
                <Badge variant="outline" className="bg-red-500/10 text-red-500 border-red-500/30">
                  Critical: {vulnerabilities.filter((v) => v.severity === "critical").length}
                </Badge>
                <Badge variant="outline" className="bg-orange-500/10 text-orange-500 border-orange-500/30">
                  High: {vulnerabilities.filter((v) => v.severity === "high").length}
                </Badge>
                <Badge variant="outline" className="bg-yellow-500/10 text-yellow-500 border-yellow-500/30">
                  Medium: {vulnerabilities.filter((v) => v.severity === "medium").length}
                </Badge>
                <Badge variant="outline" className="bg-blue-500/10 text-blue-500 border-blue-500/30">
                  Low: {vulnerabilities.filter((v) => v.severity === "low").length}
                </Badge>
              </div>
            </div>
          </>
        )}
      </CardContent>
    </Card>
  )
}
